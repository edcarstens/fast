//.+fast
//.if ('Section' not in globals()):{
//.from sect import SectionBase

//.+fast.doc < 'Section'
# Section

The class, 'Section', an extension of SectionBase class,
is useful for creating a hierarchy of named subsections as
well as binding a section to an object name. This simplifies
code because you no longer need to reference the section by
fast.sections[<section name>].

It can be extended and the methods process or processFinal
can be implemented in your extended class to perform input
processing. The process method is called by __neg__. Use
this for more immediate processing of blocks of lines.
The processFinal method is called once just before the
section or any of its subsections is output.

//.-fast.doc

//.+fast.info < 'Section.process'
process() user-implemented method called by Section.__neg__

In the Section or SectionBase classes, this method exists
but is not implemented (does nothing). To implement this
method, make a new class extended from Section.

Example

    //.fast >= "//.class MyReadData(Section):{"
    //.fast >= "//.  def __init__(self):{"
    //.fast >= "//.    self.data = []"
    //.fast >= "//.    super(MyReadData, self).__init__()"
    //.fast >= "//.  }"
    //.fast >= "//.  def process:{"
    //.fast >= "//.    for line in self.getLines():{"
    //.fast >= "//.      self.data.append(line.split(','))"
    //.fast >= "//.    }"
    //.fast >= "//.  }"
    //.fast >= "//.}"
    //.fast >= "//.myReadData = +MyReadData()"
    //.fast >= "7,5,3,1"
    //.fast >= "7,6,7,9"
    //.fast >= "//.-myReadData"

//.-fast.info

//.+fast.info < 'Section.processFinal'
processFinal() user-implemented method called by Section.__gt__

In the Section or SectionBase classes, this method exists
but is not implemented (does nothing). This method is only
called once at the first call to Section.__gt__ (Section > x)
where x is the subsection name or empty string for the section
itself.

//.-fast.info

//.+fast.info < 'Section.__init__'
__init__([x],[parent]) initialization of a new Section object

x      - section name (string type)
parent - parent Section object

A new Section object is created with section name, x, if
specified, otherwise a unique section name is automatically
assigned. If the new Section object is a subsection, the
parent argument can be used to point to its parent Section
object.

Example

    //.fast >= "apple = Section('apple')"
    //.fast >= "apple.sub1"

This example shows how a new Section object, apple, is
created. Because the next line references a non-existent
object attribute (sub1), the method Section.__getattr__
is called and a new Section object named "apple sub1"
is created whose parent is apple. The object attribute,
sub1, is created to point to the new subsection object.

The recommended naming convention for section names is
similar to Python variable names. The name should start
with a lowercase letter (a-z) and use underscores for
readability or camelCase style if preferred. 

Spaces should never be used because they have special
meaning as they are used as a delimiter for subsection
names (i.e. "apple sub1"). The colon (:) also should
not be used in the name as it is used to indicate info and
doc sections (i.e. "info:fast.on" or "doc:FAST").

//.-fast.info

//.+fast.info < 'Section.__call__'
__call__([fn]) sets the filename, flagging section is a file section

fn - filename

Sets the filename to indicate the section is to be written
to a file with filename fn. If the fn argument is not
provided, the filename defaults to the section name.
The file is written by the Section.write method, which
is called by fast.writeFiles, typically the final method
called from the main FAST template file.

//.-fast.info

//.+fast.info < 'Section.__iadd__'
__iadd__(s) adds line of text, s, to section's text

s - line of text (String type)

The conventional way of adding a line of text to a section
is via templating:

    //.fast >= "//.+apple"
    //.fast >= "Add this line to apple section."
    //.fast >= "//.-apple"

This method can be called to add a line of text to the
section (apple) in a more straightforward manner.

    //.fast >= "//.apple += 'Add this line to apple section.'"
    
//.-fast.info

//.+fast.info < 'Section.__pos__'
__pos__() +Section does a push and sets this section as the current fast section

Example

    //.fast >= "//.+apple"
    //.fast >= "Add this line to apple section."
    //.fast >= "//.-apple"

In this example, the current fast section is set to apple
so that lines between +apple and -apple are added to the
apple section text. The first line (+apple) is equivalent to:

    //.fast >= "//.+fast < apple.section"

//.-fast.info

//.+fast.info < 'Section.__getattr__'
__getattr__(x) Section.x creates subsection object if x is not already an attribute

x - subsection and attribute name

Example

    //.fast >= "//.apple.sub1"

In this example, apple is a Section object and 'sub1' is
not already an attribute of apple. When 'sub1' is
referenced, apple.__getattr__ is called with 'sub1'. A
new Section object is created as a subsection with
the name "apple sub1". The attribute 'sub1' of apple now
exists and points to this subsection object. The parent
attribute of apple.sub1 points to apple.

The gory details..
The method, apple.create('apple sub1',apple), is called
to create the subsection. Thus, a class extension may
override the create method so that it uses itself.
Otherwise, the subsection will be a Section object.

//.-fast.info

//.+fast.info < 'Section.__neg__'
__neg__() -Section pops and calls the process method

Example

    //.fast >= "//.+apple"
    //.fast >= "Add this line to apple section."
    //.fast >= "Add another line to apple section."
    //.fast >= "//.-apple"

In the example, -apple, is used at the end of adding
lines to the apple section. This is equivalent to:

    //.fast >= "//.-fast"
    //.fast >= "//.apple.process()"

The process method is not implemented by the Section
class. It may be implemented by extending Section.
For more info see Section.process.

//.-fast.info

//.+fast.info < 'Section.__gt__'
__gt__(x) Section > x prints subsection

x - subsection (String type)

Example
    //.fast >= "//.+apple"
    //.fast >= "//.apple > 'sub1'"
    //.fast >= "//.-apple"
    //.fast >= "//.apple > ''"

The second line prints subsection 'sub1' to the apple
section. More accurately, if sections are sealed, it
places a line of code in the apple section that will
print subsection 'sub1' when executed, which occurs
either when sections are unsealed or the output is to
STDOUT or to a file.

The last line supplies an empty string as an
argument, which tells FAST to print the apple section
itself.

The apple.processFinal method is called at the last
line (apple > '') prior to printing the apple section.
(If sections are sealed, a line of code is inserted
that will call apple.processFinal when executed.)
This method only gets called once. The processFinal
method is not implemented by the Section class. It may
be implemented by extending Section. For more info
see Section.processFinal.

The second line (apple > 'sub1') does not include
a call to apple.sub1.processFinal nor does it call
apple.processFinal. Since subsections should end up
being included in the parent section, it doesn't
make sense they be processed twice.

//.-fast.info

//.+fast.info < 'Section.write'
write([fn]) writes section to a file

fn - filename (String type)


//.-fast.info

//.+fast.info < 'Section.getText'
getText() a getter function that returns the section text
//.-fast.info

//.+fast.info < 'Section.getLines'
getLines() function that returns list of lines of section text
//.-fast.info

//.+fast.info < 'Section.setText'
setText(text) setter function that sets section text

text - lines of text (String type)

//.-fast.info

//.+fast.info < 'Section.chomp'
chomp([c],[cs]) removes last character (c) in section

c  - character to be removed (default: ',')
cs - line comment string (default: '//')

The alias, rstrip, may be used instead of chomp.

Example

    //.fast >= "//.apple.chomp > ''"

//.-fast.info

//.class Section(SectionBase):{
//. def __init__(self, _section='', parent=None):{
//.  super(Section, self).__init__(fast, _section, parent)
//. }
//. def create(self, _section='', parent=None):{
//.  return Section(_section, parent)
//. }
//.}
//.}

//.sec = Section('sec') # global top section object

//.-fast
